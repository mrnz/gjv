.gjv-bg {
  background: #246b8f; }

.login-form .roundnes-top {
  border-radius: 10px 10px 0 0; }
.login-form .roundnes-bottom {
  border-radius: 0 0 10px 10px; }
.login-form label.email i {
  padding-right: 10px; }
.login-form label.password i {
  padding: 0 14px 0 4px; }
.login-form label i {
  font-size: 24px; }

.reset-password-link, .fixed-or {
  display: block;
  position: relative;
  text-align: center; }

button.color-facebook.button-positive {
  background: #3B5997; }
  button.color-facebook.button-positive:before {
    font-size: 30px; }

button.color-google.button-assertive {
  background: #DD4B39; }
  button.color-google.button-assertive:before {
    font-size: 30px; }

button.color-email:before {
  font-size: 30px; }

.listEmpty {
  color: red !important;
  position: absolute; }

.loadingImage {
  opacity: 0; }

.imageAnimation {
  -webkit-transition: 0.5s linear all;
  -moz-transition: 0.5s linear all;
  -o-transition: 0.5s linear all;
  transition: 0.5s linear all; }

.loadingImage.showImage {
  opacity: 1; }

.spinerBg {
  position: absolute;
  top: 10px;
  opacity: 1; }

.spinerBg.spinerBgHide {
  opacity: 0; }

.imageContainer {
  position: relative; }

/*
  We're using CSS transitions for when
  the enter and move events are triggered
  for the element that has the .repeated-item
  class
*/
.repeated-item.ng-enter, .repeated-item.ng-move {
  -webkit-transition: 0.5s linear all;
  -moz-transition: 0.5s linear all;
  -o-transition: 0.5s linear all;
  transition: 0.5s linear all;
  opacity: 0; }

/*
 The ng-enter-active and ng-move-active
 are where the transition destination properties
 are set so that the animation knows what to
 animate.
*/
.repeated-item.ng-enter.ng-enter-active, .repeated-item.ng-move.ng-move-active {
  opacity: 1; }

/*
  We're using CSS keyframe animations for when
  the leave event is triggered for the element
  that has the .repeated-item class
*/
.repeated-item.ng-leave {
  -webkit-animation: 0.5s my_animation;
  -moz-animation: 0.5s my_animation;
  -o-animation: 0.5s my_animation;
  animation: 0.5s my_animation; }

@keyframes my_animation {
  from {
    opacity: 1; }

  to {
    opacity: 0; } }

/*
  Unfortunately each browser vendor requires
  its own definition of keyframe animation code...
*/
@-webkit-keyframes my_animation {
  from {
    opacity: 1; }

  to {
    opacity: 0; } }

@-moz-keyframes my_animation {
  from {
    opacity: 1; }

  to {
    opacity: 0; } }

@-o-keyframes my_animation {
  from {
    opacity: 1; }

  to {
    opacity: 0; } }
